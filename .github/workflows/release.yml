name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  release_version: ${{ github.ref_name }}

jobs:
  create-release:
    runs-on: ubuntu-latest

    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}

    steps:
      - name: Create release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ env.release_version }}

  release-assets:
    needs: create-release
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            cross: true
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v3

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Set outdir
        shell: bash
        run: |
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Cargo build
        if: matrix.cross == ''
        run: |
          rustup target add ${{ matrix.target }}
          cargo build --release --target ${{ matrix.target }}

      - name: Cross build
        if: matrix.cross
        run: |
          cargo install cross
          cross build --release --target ${{ matrix.target }}

      - name: Build archive
        shell: bash
        run: |
          exe_name="scafalra"
          target_dir="${{ env.TARGET_DIR }}"
          archive_dir="$exe_name-${{ evn.release_version }}-${{ matrix.target }}"
          exe_ext=""
          archive_ext="tar.gz"
          archive_cmd="tar czf"

          mkdir -p "$archive_dir"
          cp {LICENSE,README.md} "$archive_dir/"

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            exe_ext=".exe"
            archive_ext=".zip"
            archive_cmd="7z a"
          fi

          cp "$target_dir/release/$exe_name$exe_ext" "$archive_dir/"
          $archive_cmd "$archive_dir$archive_ext" "$archive_dir"
          echo "ASSET=$archive_dir$archive_ext" >> $GITHUB_ENV

      - name: Upload release assets
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_name: ${{ env.ASSET }}
          asset_path: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
